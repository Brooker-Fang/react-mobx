{"version":3,"sources":["view/BuyCartPage.js","view/CounterPage.js","App.js","store/counterStore.js","store/cartStore.js","index.js"],"names":["BuyCartPage","inject","observer","getDataByFlow","this","props","counter","console","log","onClick","increment","count","completedPrice","decrement","type","value","name","onChange","e","changeName","target","users","map","item","login","Component","cartStore","appleBasket","eatAppleBasket","appleBasketWeight","eatAppleBasketWeight","addApp","eatApp","className","length","id","weight","hot","configure","enforceActions","action","bound","flow","axios","get","data","bind","autorun","filterName","runInAction","filter","indexOf","observable","computed","push","parseInt","Math","random","index","findIndex","splice","reduce","val","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60d06fde.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport './style.css'\r\n@inject('cartStore')\r\n@observer\r\nclass BuyCartPage extends Component {\r\n  render() {\r\n    const { cartStore } = this.props\r\n    const { appleBasket, eatAppleBasket, appleBasketWeight, eatAppleBasketWeight, addApp, eatApp } = cartStore\r\n    console.log(this.props)\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>苹果篮子</h1>\r\n        <div className='info'>\r\n          <div>\r\n            <div className=\"info-title\">当前</div>\r\n            <div>{appleBasket.length}个苹果，{appleBasketWeight}克</div>\r\n          </div>\r\n          <div>\r\n            <div className=\"info-title\">已吃掉</div>\r\n            <div>{eatAppleBasket.length}个苹果，{eatAppleBasketWeight}克</div>\r\n          </div>\r\n        </div>\r\n        <div className={'basket-wrap'}>\r\n          { appleBasket.length > 0 ?\r\n            appleBasket.map((item) => {\r\n              return <div key={item.id} className=\"apple-item\">\r\n                  <div>\r\n                    <div className={'info-title'}>红苹果-{item.id}号</div>\r\n                    <div>{item.weight}克</div>\r\n                  </div>\r\n                  <button onClick={() => eatApp(item.id)} className='item-btn'>吃掉</button>\r\n              </div>\r\n            })\r\n            : <div>篮子空空如也</div>\r\n          }\r\n        </div>\r\n        <div className='add-btn-wrap'>\r\n          <button className='item-btn' onClick={addApp}>摘苹果</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BuyCartPage\r\n","import React, { Component } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\n\r\n\r\n// 通过inject 注入要获取的store对象\r\n@inject('counter')\r\n // @observer 将组件装饰为观察者\r\n@observer\r\nclass CounterPage extends Component {\r\n  componentDidMount(){\r\n    const { getDataByFlow } = this.props.counter\r\n    console.log(this.props)\r\n    // this.props.counter.getData && this.props.counter.getData()\r\n    getDataByFlow()\r\n  }\r\n  render() {\r\n    const { counter } = this.props\r\n    console.log(counter)\r\n    return (\r\n      <div>\r\n        <button onClick={counter.increment}>+</button>\r\n        count: {counter.count}\r\n        completedPrice: {counter.completedPrice}\r\n        <button onClick={counter.decrement}>-</button>\r\n        <input type=\"text\" value={counter.name} onChange={(e) => counter.changeName(e.target.value)}></input>\r\n        <div>\r\n          {counter.users.map(item => {\r\n            return  <div>{item.login}</div>\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CounterPage\r\n","import './App.css';\nimport CounterPage from './view/CounterPage'\nimport BuyCartPage from './view/BuyCartPage'\nimport { hot } from 'react-hot-loader/root';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <CounterPage></CounterPage> */}\n      <BuyCartPage></BuyCartPage>\n    </div>\n  );\n}\n\nexport default hot(App);\n","/* \r\n  1 创建store对象 存储默认状态\r\n  2 从mobx 引入Provide组件，包裹所有要使用到store对象的 组件\r\n  3 组件获取store对象中的状态\r\n*/\r\nimport axios from 'axios';\r\nimport { observable, configure, action, computed, runInAction, flow, autorun } from 'mobx'\r\n// 通过配置强制程序使用action函数 更改状态，\r\n// 即只能使用action包裹后的函数，才能更改状态\r\nconfigure({enforceActions: 'observed'})\r\n// 通过类创建 store对象,然后实例化对象\r\nclass CounterStore {\r\n  /* mobx6 的写法\r\n    constructor() {\r\n    makeObservable(this, {\r\n        count: observable,\r\n        completedPrice: computed,\r\n        increment: action\r\n    });\r\n  } */\r\n  constructor() {\r\n    // autorun用于监测数据发生变化后，执行某些操作\r\n    autorun(()=> {\r\n      this.filterName(this.name)\r\n    })\r\n  }\r\n  @observable count = 0;\r\n  @observable users = [];\r\n  @observable name = ''\r\n  // 计算属性\r\n  @computed get completedPrice() {\r\n    return this.count * 10;\r\n  }\r\n  \r\n  // increment = () => {\r\n  //   this.count = this.count + 1\r\n  // }\r\n  // decrement = () => {\r\n  //   this.count = this.count - 1\r\n  // }\r\n  // action包裹后的函数，才能更改状态\r\n  // bound更正this指向\r\n  @action.bound increment () {\r\n    this.count = this.count + 1\r\n  }\r\n  @action.bound decrement () {\r\n    this.count = this.count - 1\r\n  }\r\n  // 异步方式一\r\n  @action.bound async getData() {\r\n    let { data } = await axios.get(\"https://api.github.com/users\")\r\n    // 当函数中有异步操作时，不能直接去更改数据 如this.users = data\r\n    // 要把赋值操作 包裹到runInAction里\r\n    console.log(data)\r\n    runInAction(() => {\r\n      this.users = data\r\n    })\r\n  }\r\n  // 异步方式二: 用flow包裹\r\n  getDataByFlow = flow(function* () {\r\n    let { data } = yield axios.get(\"https://api.github.com/users\")\r\n    this.users = data\r\n  }).bind(this)\r\n\r\n  @action.bound changeName(name) {\r\n    this.name = name\r\n  }\r\n  @action.bound filterName(name) {\r\n    this.users = this.users.filter(item => item.login.indexOf(name) !== -1)\r\n  }\r\n}\r\nconst counter = new CounterStore()\r\nexport default counter","import { action, observable, computed, configure} from 'mobx'\r\n\r\nconfigure({enforceActions: 'observed'})\r\nclass CartStore{\r\n  @observable appleBasket = []; // 当前苹果篮\r\n  @observable eatAppleBasket = []; // 吃掉的苹果篮\r\n  @action.bound addApp (){\r\n    this.appleBasket.push({\r\n      id: this.appleBasket.length + this.eatAppleBasket.length + 1,\r\n      weight: parseInt(1 + Math.random() * 1000, 10)\r\n    })\r\n  }\r\n  @action.bound eatApp(id){\r\n    let index = this.appleBasket.findIndex(item => item.id === id)\r\n    this.eatAppleBasket.push(this.appleBasket[index])\r\n    this.appleBasket.splice(index, 1)\r\n  }\r\n  @computed get appleBasketWeight() {\r\n    return this.appleBasket.reduce((val,item) => { \r\n      return val + item.weight\r\n    }, 0)\r\n  }\r\n  @computed get eatAppleBasketWeight() {\r\n    return this.eatAppleBasket.reduce((val,item) => { \r\n      return val + item.weight\r\n    }, 0)\r\n  }\r\n}\r\nexport default new CartStore()","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'mobx-react'\nimport counter from './store/counterStore'\nimport cartStore from './store/cartStore'\n\nReactDOM.render(\n    <Provider counter={counter} cartStore={cartStore}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}